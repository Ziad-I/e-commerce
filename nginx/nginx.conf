events {
    worker_connections 1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    proxy_cache_path /var/cache/nginx/auth levels=1:2 keys_zone=auth_cache:10m max_size=30m inactive=5m use_temp_path=off;


    upstream user-service    { server user-service:8000; }
    upstream product-service { server product-service:8000; }
    upstream cart-service    { server cart-service:8000; }
    upstream search-service  { server search-service:8000; }

    map $service $backend_upstream {
        users    user-service;
        products product-service;
        cart     cart-service;
        search   search-service;
    }

    server {
        listen    80;

        location /_auth/validate {
            internal;

            proxy_cache auth_cache;
            proxy_cache_key "$http_authorization";
            proxy_cache_valid 200 5m;
            proxy_cache_valid 401 403 10s;
            proxy_cache_lock on;

            proxy_pass http://user-service/api/v1/users/auth/validate;
            proxy_pass_request_body off;
            proxy_set_header Content-Length "";
            proxy_set_header X-Original-URI $request_uri;
            proxy_set_header Authorization $http_authorization;
        }

       location ~ ^/api/v1/users/(.*)$ {
            proxy_pass http://user-service/api/v1/users/$1$is_args$args;
            proxy_set_header Host              $host;
            proxy_set_header X-Real-IP         $remote_addr;
            proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header   Authorization  $http_authorization;
        }

        location ~ ^/api/v1/(?<service>[^/]+)/(?<tail>.*)$ {
            auth_request /_auth/validate;
            auth_request_set $auth_user_id       $upstream_http_x_user_id;
            auth_request_set $auth_user_email    $upstream_http_x_user_email;
            auth_request_set $auth_user_verified $upstream_http_x_user_verified;

            error_page 401 = @error401;
            error_page 403 = @error403;

            proxy_pass http://$backend_upstream/api/v1/$service/$tail$is_args$args;
            proxy_set_header Host              $host;
            proxy_set_header X-Real-IP         $remote_addr;
            proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-User-Id         $auth_user_id;
            proxy_set_header X-User-Email      $auth_user_email;
            proxy_set_header X-User-Verified   $auth_user_verified;
        }

        location @error401 {
            default_type application/json;
            return 401 '{"error": "Unauthorized", "message": "Invalid or missing authentication token"}';
        }

        location @error403 {
            default_type application/json;
            return 403 '{"error": "Forbidden", "message": "Access denied"}';
        }
    }
}
